<?php

/*
 * This file is part of Composer.
 *
 * (c) Nils Adermann <naderman@naderman.de>
 *     Jordi Boggiano <j.boggiano@seld.be>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Composer\Test\Installer;

use Composer\Test\TestCase;
use Composer\Util\Filesystem;
use Composer\Installer\GlobalInstaller;
use Composer\Composer;
use Composer\Config;
use Composer\Package\Loader\ArrayLoader;
use Composer\IO\BufferIO;
use Composer\Installer;
use Composer\Autoload\AutoloadGenerator;
use Composer\Installer\InstallationManager;
use Composer\Package\Version\VersionParser;
use Composer\Package\PackageInterface;
use Composer\Package\Loader\RootPackageLoader;
use Composer\Repository\RepositoryManager;
use Composer\Json\JsonFile;
use Composer\Repository\InstalledFilesystemRepository;

class GlobalInstallerTest extends TestCase
{
    private $fs;
    private $cwd;
    private $workingDir;
    private $globalDir;
    private $io;
    private $composer;
    private static $deleteGlobalDir = true;
    private static $deleteWorkingDir = true;

    protected function setUp()
    {
        self::$deleteGlobalDir = true;
        self::$deleteWorkingDir = true;

        $this->cwd = getcwd();
        $this->fs = new Filesystem;

        $this->workingDir = sys_get_temp_dir().DIRECTORY_SEPARATOR.'composer-working';
        $this->ensureDirectoryExistsAndClear($this->workingDir);
        chdir($this->workingDir);

        $this->globalDir = sys_get_temp_dir().DIRECTORY_SEPARATOR.'composer-global';

        $config = new Config();
        $config->merge(array(
            'config' => array(
                'home' => $this->workingDir,
                'vendor-dir' => $this->workingDir.'/vendor',
            ),
        ));

        $this->composer = new Composer();
        $this->composer->setConfig($config);

        $this->io = new BufferIO();
    }

    protected function tearDown()
    {
        chdir($this->cwd);
        if (self::$deleteWorkingDir) {
            $this->fs->removeDirectory($this->workingDir);
        }
        if (self::$deleteGlobalDir) {
            $this->fs->removeDirectory($this->globalDir);
        }
    }

    /**
     * @dataProvider dataGetInstallPath
     */
    public function testGetInstallPath($path, array $package)
    {
        $installer = new GlobalInstaller($this->io, $this->composer, $this->globalDir);
        $loader = new ArrayLoader();
        $package = $loader->load($package);

        $this->assertEquals($this->globalDir.$path, $installer->getInstallPath($package));
    }

    public function dataGetInstallPath()
    {
        return array(
            array($this->workingDir.'/foo/foo-1.0.0.0', array('name' => 'foo/foo', 'version' => '1')),
            array($this->workingDir.'/foo/foo-1.0.0.0', array('name' => 'foo/foo', 'version' => '1.0')),
            array($this->workingDir.'/foo/foo-1.1.0.0-beta', array('name' => 'foo/foo', 'version' => 'v1.1-beta')),
            array($this->workingDir.'/foo/foo-9999999-dev', array('name' => 'foo/foo', 'version' => 'dev-master')),
            array($this->workingDir.'/foo/foo-9999999-dev-cf6cb35', array('name' => 'foo/foo', 'version' => 'dev-master', 'source' => array('reference' => 'cf6cb35abde20047e830b47ab1f68f963661c33b', 'type' => 'git', 'url' => 'http://example.org'))),
        );
    }

    public function testInstallA()
    {
        $paths = array();
        $installer = $this->createInstaller(__DIR__.'/Fixtures/global-installer/install_a.json', $paths);
        $installer->run();

        $this->assertEquals(array_map('realpath', array(
            'foo/bar' => $this->globalDir.'/foo/bar-1.2.0.0',
            'foo/foo' => $this->globalDir.'/foo/foo-0.8.3.0',
            'foo/test' => $this->globalDir.'/foo/test-1.0.0.0',
        )), array_map('realpath', $paths));

        $ioOutput = <<<'EOT'
Loading composer repositories with package information
Installing dependencies
  - Installing foo/bar (1.2)
  - Installing foo/foo (0.8.3)
  - Installing foo/test (1.0)
Generating autoload files

EOT;

        $this->assertEquals($ioOutput, strtr($this->io->getOutput(), array("\r\n" => "\n", "\r" => "\n")));

        $autoloadNamespaces = <<<'EOT'
<?php

// autoload_namespaces.php generated by Composer

$vendorDir = dirname(dirname(__FILE__));
$baseDir = dirname($vendorDir);

return array(
    'foo' => $baseDir . '/src',
    'Foo\\Foo' => $baseDir . '/../composer-global/foo/foo-0.8.3.0/src',
    'Foo\\Bar' => $baseDir . '/../composer-global/foo/bar-1.2.0.0/lib',
);

EOT;

        $this->assertEquals($autoloadNamespaces, file_get_contents($this->workingDir.'/vendor/composer/autoload_namespaces.php'));

        self::$deleteGlobalDir = false;
    }

    /**
     * @depends testInstallA
     */
    public function testInstallB()
    {
        $paths = array();
        $installer = $this->createInstaller(__DIR__.'/Fixtures/global-installer/install_b.json', $paths);
        $installer->run();

        $this->assertEquals(array_map('realpath', array(
            'bar/foo' => $this->globalDir.'/bar/foo-9999999-dev-8f619c1/Bar/Foo',
        )), array_map('realpath', $paths));

        $ioOutput = <<<'EOT'
Loading composer repositories with package information
Installing dependencies
  - Installing bar/foo (dev-master 8f619c1)
Generating autoload files

EOT;

        $this->assertEquals($ioOutput, strtr($this->io->getOutput(), array("\r\n" => "\n", "\r" => "\n")));

        $autoloadNamespaces = <<<'EOT'
<?php

// autoload_namespaces.php generated by Composer

$vendorDir = dirname(dirname(__FILE__));
$baseDir = dirname($vendorDir);

return array(
    'foo' => $baseDir . '/src',
    'bar' => $baseDir . '/src',
    'Bar\\Foo' => $baseDir . '/../composer-global/bar/foo-9999999-dev-8f619c1/lib',
);

EOT;

        $this->assertEquals($autoloadNamespaces, file_get_contents($this->workingDir.'/vendor/composer/autoload_namespaces.php'));
        $this->assertFileExists($this->globalDir.'/foo/foo-0.8.3.0');
        $this->assertFileExists($this->globalDir.'/foo/bar-1.2.0.0');
        $this->assertFileExists($this->globalDir.'/foo/test-1.0.0.0');

        self::$deleteGlobalDir = false;
        self::$deleteWorkingDir = false;
    }

    public function testUpdateB()
    {
        $paths = array();
        $installer = $this->createInstaller(__DIR__.'/Fixtures/global-installer/update_b.json', $paths);
        $installer->setUpdate(true);
        $installer->run();

        $this->assertEquals(array_map('realpath', array(
            'bar/foo' => $this->globalDir.'/bar/foo-9999999-dev-9e210c8/Bar/Foo',
            'foo/bar' => $this->globalDir.'/foo/bar-1.8.0.0',
        )), array_map('realpath', $paths));

        $ioOutput = <<<'EOT'
Loading composer repositories with package information
Updating dependencies
  - Installing foo/bar (1.8)
  - Installing bar/foo (dev-master 9e210c8)
Generating autoload files

EOT;

        $this->assertEquals($ioOutput, strtr($this->io->getOutput(), array("\r\n" => "\n", "\r" => "\n")));

        $autoloadNamespaces = <<<'EOT'
<?php

// autoload_namespaces.php generated by Composer

$vendorDir = dirname(dirname(__FILE__));
$baseDir = dirname($vendorDir);

return array(
    'foo' => $baseDir . '/src',
    'bar' => $baseDir . '/src',
    'Foo\\Bar' => $baseDir . '/../composer-global/foo/bar-1.8.0.0/lib',
    'Bar\\Foo' => $baseDir . '/../composer-global/bar/foo-9999999-dev-9e210c8/src',
);

EOT;

        $this->assertEquals($autoloadNamespaces, file_get_contents($this->workingDir.'/vendor/composer/autoload_namespaces.php'));

        $this->assertFileExists($this->globalDir.'/foo/foo-0.8.3.0');
        $this->assertFileExists($this->globalDir.'/foo/bar-1.2.0.0');
        $this->assertFileExists($this->globalDir.'/foo/test-1.0.0.0');
        $this->assertFileExists($this->globalDir.'/bar/foo-9999999-dev-8f619c1/Bar/Foo');
    }

    private function createInstaller($file, array &$paths)
    {
        $io = $this->io;

        $config = JsonFile::parseJson(file_get_contents($file));

        $this->composer->getConfig()->merge($config);

        $downloadManager = $this->getMock('Composer\Downloader\DownloadManager');
        $downloadManager->expects($this->any())->method('download')->will($this->returnCallback(
            function (PackageInterface $package, $targetDir, $preferSource = null) use ($io, &$paths) {
                if (!is_dir($targetDir)) {
                    mkdir($targetDir, 0777, true);
                }

                $io->write("  - Installing <info>" . $package->getName() . "</info> (<comment>" . VersionParser::formatVersion($package) . "</comment>)");
                $paths[$package->getName()] = $targetDir;
            }
        ));
        $downloadManager->expects($this->never())->method('remove');
        $downloadManager->expects($this->never())->method('update');

        $this->composer->setDownloadManager($downloadManager);

        $installationManager = new InstallationManager();
        $installationManager->addInstaller(new GlobalInstaller($this->io, $this->composer, $this->globalDir));

        $this->composer->setInstallationManager($installationManager);

        $repositoryManager = new RepositoryManager($this->io, $this->composer->getConfig());
        $repositoryManager->setRepositoryClass('composer', 'Composer\Repository\ComposerRepository');
        $repositoryManager->setRepositoryClass('package', 'Composer\Repository\PackageRepository');
        $repositoryManager->setLocalRepository(new InstalledFilesystemRepository(new JsonFile($this->workingDir.'/vendor/composer/installed.json')));

        $this->composer->setRepositoryManager($repositoryManager);

        $locker = $this->getMockBuilder('Composer\Package\Locker')->disableOriginalConstructor()->getMock();
        $locker->expects($this->any())->method('isLocked')->will($this->returnValue(false));

        $this->composer->setLocker($locker);

        $this->composer->setEventDispatcher($this->getMockBuilder('Composer\Script\EventDispatcher')->disableOriginalConstructor()->getMock());

        $this->composer->setAutoloadGenerator(new AutoloadGenerator($this->composer->getEventDispatcher()));

        $loader = new RootPackageLoader($repositoryManager, $this->composer->getConfig());
        $this->composer->setPackage($loader->load($config));

        $installer = Installer::create($io, $this->composer);
        $installer->setPreferDist(true);
        $installer->setRunScripts(false);
        $installer->setVerbose(true);

        return $installer;
    }
}
